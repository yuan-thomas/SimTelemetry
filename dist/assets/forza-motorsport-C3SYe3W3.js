class Xt{constructor(){this.previousFrame=null,this.EXPECTED_SIZE=331}decode(o){if(o.byteLength!=this.EXPECTED_SIZE)return console.warn(`Forza decoder: Invalid buffer size. Expected ${this.EXPECTED_SIZE}, got ${o.byteLength}`),null;const e=new DataView(o);let t=0;try{const n=e.getInt32(t,!0);t+=4;const c=e.getUint32(t,!0);t+=4;const g=e.getFloat32(t,!0);t+=4;const F=e.getFloat32(t,!0);t+=4;const R=e.getFloat32(t,!0);t+=4;const p=e.getFloat32(t,!0);t+=4;const h=e.getFloat32(t,!0);t+=4;const d=e.getFloat32(t,!0);t+=4;const S=e.getFloat32(t,!0);t+=4;const T=e.getFloat32(t,!0);t+=4;const m=e.getFloat32(t,!0);t+=4;const L=e.getFloat32(t,!0);t+=4;const v=e.getFloat32(t,!0);t+=4;const z=e.getFloat32(t,!0);t+=4;const I=e.getFloat32(t,!0);t+=4;const f=e.getFloat32(t,!0);t+=4;const N=e.getFloat32(t,!0);t+=4;const y=e.getFloat32(t,!0);t+=4;const C=e.getFloat32(t,!0);t+=4;const E=e.getFloat32(t,!0);t+=4;const W=e.getFloat32(t,!0);t+=4;const D=e.getFloat32(t,!0);t+=4;const P=e.getFloat32(t,!0);t+=4;const b=e.getFloat32(t,!0);t+=4;const V=e.getFloat32(t,!0);t+=4;const A=e.getFloat32(t,!0);t+=4;const k=e.getFloat32(t,!0);t+=4;const M=e.getFloat32(t,!0);t+=4;const O=e.getFloat32(t,!0);t+=4;const w=e.getInt32(t,!0);t+=4;const U=e.getInt32(t,!0);t+=4;const X=e.getInt32(t,!0);t+=4;const Z=e.getInt32(t,!0);t+=4;const _=e.getFloat32(t,!0);t+=4;const B=e.getFloat32(t,!0);t+=4;const Y=e.getFloat32(t,!0);t+=4;const x=e.getFloat32(t,!0);t+=4;const G=e.getFloat32(t,!0);t+=4;const $=e.getFloat32(t,!0);t+=4;const q=e.getFloat32(t,!0);t+=4;const H=e.getFloat32(t,!0);t+=4;const j=e.getFloat32(t,!0);t+=4;const J=e.getFloat32(t,!0);t+=4;const K=e.getFloat32(t,!0);t+=4;const Q=e.getFloat32(t,!0);t+=4;const tt=e.getFloat32(t,!0);t+=4;const et=e.getFloat32(t,!0);t+=4;const ot=e.getFloat32(t,!0);t+=4;const rt=e.getFloat32(t,!0);t+=4;const nt=e.getFloat32(t,!0);t+=4;const it=e.getFloat32(t,!0);t+=4;const at=e.getFloat32(t,!0);t+=4;const lt=e.getFloat32(t,!0);t+=4;const st=e.getInt32(t,!0);t+=4;const ut=e.getInt32(t,!0);t+=4;const ct=e.getInt32(t,!0);t+=4;const gt=e.getInt32(t,!0);t+=4;const Ft=e.getInt32(t,!0);t+=4;const Rt=e.getFloat32(t,!0);t+=4;const pt=e.getFloat32(t,!0);t+=4;const ht=e.getFloat32(t,!0);t+=4;const dt=e.getFloat32(t,!0);t+=4;const St=e.getFloat32(t,!0);t+=4;const Tt=e.getFloat32(t,!0);t+=4;const mt=e.getFloat32(t,!0);t+=4;const Lt=e.getFloat32(t,!0);t+=4;const vt=e.getFloat32(t,!0);t+=4;const zt=e.getFloat32(t,!0);t+=4;const It=e.getFloat32(t,!0);t+=4;const ft=e.getFloat32(t,!0);t+=4;const Nt=e.getFloat32(t,!0);t+=4;const yt=e.getFloat32(t,!0);t+=4;const Ct=e.getFloat32(t,!0);t+=4;const Et=e.getFloat32(t,!0);t+=4;const Wt=e.getFloat32(t,!0);t+=4;const Dt=e.getUint16(t,!0);t+=2;const Pt=e.getUint8(t);t+=1;const bt=e.getUint8(t);t+=1;const Vt=e.getUint8(t);t+=1;const At=e.getUint8(t);t+=1;const kt=e.getUint8(t);t+=1;const Mt=e.getUint8(t);t+=1;const Ot=e.getInt8(t);t+=1;const wt=e.getInt8(t);t+=1;const Ut=e.getInt8(t);t+=1;let i,a,l,s,u;o.byteLength>=331&&(i=e.getFloat32(t,!0),t+=4,a=e.getFloat32(t,!0),t+=4,l=e.getFloat32(t,!0),t+=4,s=e.getFloat32(t,!0),t+=4,u=e.getInt32(t,!0),t+=4);const r={IsRaceOn:n,TimestampMS:c,EngineMaxRpm:g,EngineIdleRpm:F,CurrentEngineRpm:R,AccelerationX:p,AccelerationY:h,AccelerationZ:d,VelocityX:S,VelocityY:T,VelocityZ:m,AngularVelocityX:L,AngularVelocityY:v,AngularVelocityZ:z,Yaw:I,Pitch:f,Roll:N,NormalizedSuspensionTravelFrontLeft:y,NormalizedSuspensionTravelFrontRight:C,NormalizedSuspensionTravelRearLeft:E,NormalizedSuspensionTravelRearRight:W,TireSlipRatioFrontLeft:D,TireSlipRatioFrontRight:P,TireSlipRatioRearLeft:b,TireSlipRatioRearRight:V,WheelRotationSpeedFrontLeft:A,WheelRotationSpeedFrontRight:k,WheelRotationSpeedRearLeft:M,WheelRotationSpeedRearRight:O,WheelOnRumbleStripFrontLeft:w,WheelOnRumbleStripFrontRight:U,WheelOnRumbleStripRearLeft:X,WheelOnRumbleStripRearRight:Z,WheelInPuddleDepthFrontLeft:_,WheelInPuddleDepthFrontRight:B,WheelInPuddleDepthRearLeft:Y,WheelInPuddleDepthRearRight:x,SurfaceRumbleFrontLeft:G,SurfaceRumbleFrontRight:$,SurfaceRumbleRearLeft:q,SurfaceRumbleRearRight:H,TireSlipAngleFrontLeft:j,TireSlipAngleFrontRight:J,TireSlipAngleRearLeft:K,TireSlipAngleRearRight:Q,TireCombinedSlipFrontLeft:tt,TireCombinedSlipFrontRight:et,TireCombinedSlipRearLeft:ot,TireCombinedSlipRearRight:rt,SuspensionTravelMetersFrontLeft:nt,SuspensionTravelMetersFrontRight:it,SuspensionTravelMetersRearLeft:at,SuspensionTravelMetersRearRight:lt,CarOrdinal:st,CarClass:ut,CarPerformanceIndex:ct,DrivetrainType:gt,NumCylinders:Ft,PositionX:Rt,PositionY:pt,PositionZ:ht,Speed:dt,Power:St,Torque:Tt,TireTempFrontLeft:mt,TireTempFrontRight:Lt,TireTempRearLeft:vt,TireTempRearRight:zt,Boost:It,Fuel:ft,DistanceTraveled:Nt,BestLap:yt,LastLap:Ct,CurrentLap:Et,CurrentRaceTime:Wt,LapNumber:Dt,RacePosition:Pt,Accel:bt,Brake:Vt,Clutch:At,HandBrake:kt,Gear:Mt,Steer:Ot,NormalizedDrivingLine:wt,NormalizedAIBrakeDifference:Ut,TireWearFrontLeft:i??0,TireWearFrontRight:a??0,TireWearRearLeft:l??0,TireWearRearRight:s??0,TrackOrdinal:u??0,t:Date.now(),packet_type:1};return r.IsRaceOn!==1||r.LapNumber==0&&r.CurrentLap==0?null:(this.calculateDerivedFields(r),this.previousFrame=r,r)}catch(n){return console.error("Forza decoder error:",n),null}}calculateDerivedFields(o){if(this.previousFrame){const e=o.CurrentRaceTime-this.previousFrame.CurrentRaceTime||.016;o.NormalizedSuspensionVelocityFrontLeft=(o.NormalizedSuspensionTravelFrontLeft-this.previousFrame.NormalizedSuspensionTravelFrontLeft)/e,o.NormalizedSuspensionVelocityFrontRight=(o.NormalizedSuspensionTravelFrontRight-this.previousFrame.NormalizedSuspensionTravelFrontRight)/e,o.NormalizedSuspensionVelocityRearLeft=(o.NormalizedSuspensionTravelRearLeft-this.previousFrame.NormalizedSuspensionTravelRearLeft)/e,o.NormalizedSuspensionVelocityRearRight=(o.NormalizedSuspensionTravelRearRight-this.previousFrame.NormalizedSuspensionTravelRearRight)/e,o.Shifting=o.Gear!==this.previousFrame.Gear?1:0}else o.NormalizedSuspensionVelocityFrontLeft=0,o.NormalizedSuspensionVelocityFrontRight=0,o.NormalizedSuspensionVelocityRearLeft=0,o.NormalizedSuspensionVelocityRearRight=0,o.Shifting=0;o.RaceID=Math.floor(o.TimestampMS/1e6)*1e3+o.TrackOrdinal}getPacketTypeName(o){return o===1?"Forza Motorsport":`Unknown_${o}`}getSupportedPacketTypes(){return[{type:1,name:"Forza Motorsport"}]}getAcceptedPacketSizes(){return[this.EXPECTED_SIZE]}}const _t=new Xt;export{_t as forzaDecoder};
